@echo off
REM ==========================================================================
REM  Final Startup Script for the RGB Controller
REM
REM  This script is designed to be run by the Windows Task Scheduler.
REM  It assumes that the OpenRGB SDK Server is already running or is being
REM  started by a separate process/task.
REM
REM  --- INSTRUCTIONS ---
REM  1. RENAME this file from 'run_rgb.bat.example' to 'run_rgb.bat'.
REM  2. EDIT the PYTHON_EXE variable below to match your system path.
REM
REM  This '.bat' file should be added to your .gitignore.
REM ==========================================================================

REM ##########################################################################
REM #                        CONFIGURATION                                   #
REM ##########################################################################

REM --- !!! IMPORTANT: EDIT THIS PATH !!! ---
REM Set this to the FULL, ABSOLUTE path of your project's python.exe
REM To find this, open a command prompt and type: where python
SET "PYTHON_EXE=C:\Users\Sahil\Miniconda3\envs\open-rgb\python.exe"


REM ##########################################################################
REM #                        EXECUTION LOGIC                                 #
REM ##########################################################################

REM --- Set the working directory to the location of this script ---
SET "PROJECT_DIR=%~dp0"
cd /d "%PROJECT_DIR%"

REM --- Sanity Check ---
IF NOT EXIST "%PYTHON_EXE%" (
    REM This error won't be visible on boot, but is useful for manual testing.
    echo [FATAL] Python.exe not found at the specified path: %PYTHON_EXE%
    pause
    EXIT /B 1
)

REM --- Main Execution ---

REM Set the environment variable to force UTF-8 encoding.
REM This prevents 'charmap' codec errors in the non-interactive session.
SET PYTHONIOENCODING=utf-8

REM Run the Python script directly. The script's internal logic will handle
REM waiting for the OpenRGB server to become available.
REM The '-u' flag ensures unbuffered output for reliable logging if needed.
"%PYTHON_EXE%" -u -m src.main

REM The script will block on the line above until the Python process terminates.
EXIT /B 0